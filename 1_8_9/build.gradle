import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.publish.maven.MavenPublication

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'maven-publish'
    //TODO: investigate unimined not working on 1.3.4,
    // cause duplicate file coremod something
    id 'xyz.wagyourtail.unimined' version '1.1.0'
}

group='me.earth.headlessmc'
version "$minecraft_version-${project(':api').project_version}"

base {
    archivesName = 'hmc-specifics'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    fabric {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    lexforge {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    maven {
        name = "wagyourtail releases"
        url = "https://maven.wagyourtail.xyz/releases"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven {
        name '3arthMaven'
        url 'https://3arthqu4ke.github.io/maven'
    }

    mavenCentral()
}

unimined.minecraft {
    version project.minecraft_version

    mappings {
        searge()
        mcp("stable", "22-1.8.9")
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    combineWith(sourceSets.main)

    legacyFabric {
        loader project.fabric_version
    }

    defaultRemapJar = true
}

unimined.minecraft(sourceSets.lexforge) {
    combineWith(sourceSets.main)

    minecraftForge {
        loader project.lexforge_version
        mixinConfig "mixins.headlessmc.json"
    }

    defaultRemapJar = true
}

configurations {
    mainImplementation
    implementation {
        extendsFrom lexforgeImplementation
        extendsFrom fabricImplementation
    }

    jarLibs
    implementation.extendsFrom jarLibs
}

sourceSets {
    main {
        compileClasspath += configurations.mainImplementation
        runtimeClasspath += configurations.mainImplementation
    }
}

dependencies {
    implementation ('net.minecraft:launchwrapper:1.12') {
        exclude module: 'log4j-api'
        exclude module: 'log4j-core'
    }
    jarLibs 'com.github.ImpactDevelopment:SimpleTweaker:1.2'
    jarLibs('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }

    jarLibs project(':api')
    jarLibs 'me.earth.headlessmc:headlessmc-api:1.8.0'
    jarLibs 'me.earth.headlessmc:headlessmc-commons:1.8.0'
    jarLibs 'me.earth.headlessmc:headlessmc-runtime:1.8.0'
}

for (String platform_capitalized : ['Fabric', 'Lexforge']) {
    def platform = platform_capitalized.toLowerCase()
    def remapJarTask = tasks.named("remap${platform_capitalized}Jar", AbstractArchiveTask).get()
    def shadowTask = tasks.register("${platform}ShadowJar", ShadowJar) {
        dependsOn(remapJarTask)
        it.group = 'build'
        it.archiveClassifier = "${platform}-release"
        from remapJarTask.outputs
        it.configurations += [ project.configurations.jarLibs ]
        // Mixin is signed
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.SF'
    }

    tasks.named('build') { finalizedBy(shadowTask) }
}


jar {
    enabled = false
}

tasks.withType(org.gradle.jvm.tasks.Jar).configureEach {
    from("LICENSE") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        rename { "${it}_${project.archivesBaseName}" }
    }

    manifest {
        attributes(
                'Implementation-Title': 'HMC-Specifics',
                'TweakClass': 'me.earth.headlessmc.mc.tweaker.HeadlessMcMcTweaker',
                'MixinConnector': 'me.earth.headlessmc.mc.tweaker.HeadlessMcMixinConnector',
                'MixinConfigs': "mixins.headlessmc.json",
                'Implementation-Version': project.version,
        )
    }
}

processFabricResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processLexforgeResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

    filesMatching("mcmod.info") {
        expand "version": project.version
    }
}

afterEvaluate {
    publishing {
        publications {
            "${name.toLowerCase()}"(MavenPublication) {
                ((MavenPublication) it).groupId "${group}"
                ((MavenPublication) it).artifactId "${archivesBaseName.toLowerCase()}"
                ((MavenPublication) it).version "${version}"
                from components.java
                for (String platform: ['Fabric', 'Lexforge']) {
                    String platform_lower = platform.toLowerCase()
                    artifact tasks.named("${platform_lower}Jar").get()
                    artifact tasks.named("remap${platform}Jar").get()
                    artifact tasks.named("${platform_lower}ShadowJar").get()
                }
            }
        }

        repositories {
            if (System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL') == null) {
                maven {
                    name = 'BuildDirMaven'
                    url = rootProject.projectDir.toPath().parent.resolve('build').resolve('maven')
                }
            } else {
                maven {
                    name = 'GithubPagesMaven'
                    url = System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL')
                    credentials {
                        username = System.getenv('GITHUB_USER')
                        password = System.getenv('GITHUB_TOKEN')
                    }
                }
            }
        }
    }
}
