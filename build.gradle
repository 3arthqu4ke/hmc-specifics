plugins {
    id 'java'
    id 'dev.architectury.loom' version '1.0.308' apply false
    id 'maven-publish'
}

archivesBaseName  = 'hmc-specifics'
version = '1.19.3'
group = 'me.earth.headlessmc'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def type = project.property('build_type').toString()
assert type.equalsIgnoreCase('official')
        || type.equalsIgnoreCase('fabric')
        || type.equalsIgnoreCase('forge'),
        'build_type must be one of fabric, forge, official!'

if (type.equalsIgnoreCase('forge')) {
    project.ext.'loom.platform' = 'FORGE'
} else {
    project.ext.'loom.platform' = 'FABRIC'
}

apply plugin: 'dev.architectury.loom'

loom {
    if (type.equalsIgnoreCase("forge")) {
        forge {
            mixinConfig 'mixins.headlessmc.json'
        }
    }
    mixin.defaultRefmapName = "mixins.headlessmc.refmap.json"
}

sourceSets {
    if (!type.equalsIgnoreCase("forge")) {
        mock { }
        sourceSets.main.compileClasspath += mock.output
    }
}


repositories {
    maven {
        name = "jitpack.io"
        url  = "https://jitpack.io"
    }

    mavenCentral()
}

configurations {
    jarLibs
}

dependencies {
    if (type.equalsIgnoreCase("forge")) {
        forge "net.minecraftforge:forge:1.19.3-44.1.5"
    }
    mappings loom.layered() {
        officialMojangMappings()
    }
    minecraft "com.mojang:minecraft:1.19.3"
    if (!type.equalsIgnoreCase("forge")) {
        modImplementation "net.fabricmc:fabric-loader:0.14.12"
    }

    // TODO: I was stupid and too lazy to fix
    jarLibs('com.github.3arthqu4ke:HMC-Specifics:1.1.0') {
        exclude module: 'headlessmc-launcher'
        exclude module: 'headlessmc-lwjgl'
    }

    jarLibs('com.github.3arthqu4ke:HeadlessMc:1.5.2') {
        exclude module: 'headlessmc-launcher'
        exclude module: 'headlessmc-lwjgl'
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    implementation configurations.jarLibs
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release.set(16)
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.jarLibs.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    if (!type.equalsIgnoreCase("forge")) {
        exclude "**/HeadlessMcForgeMod.class"
        exclude "**/mods.toml"
    }

    if (!type.equalsIgnoreCase("fabric")) {
        exclude("fabric.mod.json")
    }

    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes(
            'MixinConfigs': 'mixins.headlessmc.json',
            'MixinConnector': 'me.earth.headlessmc.mc.tweaker.HeadlessMcMixinConnector',
            'Implementation-Title': 'HeadlessMc',
            'Implementation-Version': project.version,
        )
    }
}

remapJar {
    classifier(type)
}

if (type.equalsIgnoreCase("official")) {
    remapJar {
        // TODO: fix
        // toM.set "official"
    }
}
